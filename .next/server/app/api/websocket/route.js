"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/websocket/route";
exports.ids = ["app/api/websocket/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebsocket%2Froute&page=%2Fapi%2Fwebsocket%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebsocket%2Froute.ts&appDir=T%3A%5CDevTea%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=T%3A%5CDevTea&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebsocket%2Froute&page=%2Fapi%2Fwebsocket%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebsocket%2Froute.ts&appDir=T%3A%5CDevTea%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=T%3A%5CDevTea&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var T_DevTea_app_api_websocket_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/websocket/route.ts */ \"(rsc)/./app/api/websocket/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/websocket/route\",\n        pathname: \"/api/websocket\",\n        filename: \"route\",\n        bundlePath: \"app/api/websocket/route\"\n    },\n    resolvedPagePath: \"T:\\\\DevTea\\\\app\\\\api\\\\websocket\\\\route.ts\",\n    nextConfigOutput,\n    userland: T_DevTea_app_api_websocket_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/websocket/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ3ZWJzb2NrZXQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRndlYnNvY2tldCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRndlYnNvY2tldCUyRnJvdXRlLnRzJmFwcERpcj1UJTNBJTVDRGV2VGVhJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1UJTNBJTVDRGV2VGVhJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNQO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGV2dGVhLWNoYXQvPzBjZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiVDpcXFxcRGV2VGVhXFxcXGFwcFxcXFxhcGlcXFxcd2Vic29ja2V0XFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS93ZWJzb2NrZXQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS93ZWJzb2NrZXRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3dlYnNvY2tldC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIlQ6XFxcXERldlRlYVxcXFxhcHBcXFxcYXBpXFxcXHdlYnNvY2tldFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvd2Vic29ja2V0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebsocket%2Froute&page=%2Fapi%2Fwebsocket%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebsocket%2Froute.ts&appDir=T%3A%5CDevTea%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=T%3A%5CDevTea&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/websocket/route.ts":
/*!************************************!*\
  !*** ./app/api/websocket/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n// Enhanced in-memory storage\nconst clients = new Map();\nconst messages = new Map();\nconst typingUsers = new Map();\nconst rooms = new Map();\nconst userRoomMemberships = new Map() // userId -> Set of roomIds\n;\n// Initialize default rooms and messages\nif (rooms.size === 0) {\n    console.log(\"Initializing default rooms...\");\n    // Create default rooms\n    rooms.set(\"general\", {\n        id: \"general\",\n        name: \"General\",\n        description: \"General discussion for all developers\",\n        createdBy: \"system\",\n        createdAt: Date.now(),\n        members: new Set(),\n        isPrivate: false,\n        isPublic: true\n    });\n    rooms.set(\"frontend\", {\n        id: \"frontend\",\n        name: \"Frontend Devs\",\n        description: \"React, Vue, Angular, and all things frontend\",\n        createdBy: \"system\",\n        createdAt: Date.now(),\n        members: new Set(),\n        isPrivate: false,\n        isPublic: true\n    });\n    rooms.set(\"backend\", {\n        id: \"backend\",\n        name: \"Backend Devs\",\n        description: \"APIs, databases, servers, and backend architecture\",\n        createdBy: \"system\",\n        createdAt: Date.now(),\n        members: new Set(),\n        isPrivate: false,\n        isPublic: true\n    });\n    rooms.set(\"mobile\", {\n        id: \"mobile\",\n        name: \"Mobile Development\",\n        description: \"iOS, Android, React Native, Flutter discussions\",\n        createdBy: \"system\",\n        createdAt: Date.now(),\n        members: new Set(),\n        isPrivate: false,\n        isPublic: true\n    });\n    rooms.set(\"devops\", {\n        id: \"devops\",\n        name: \"DevOps & Infrastructure\",\n        description: \"CI/CD, Docker, Kubernetes, cloud platforms\",\n        createdBy: \"system\",\n        createdAt: Date.now(),\n        members: new Set(),\n        isPrivate: false,\n        isPublic: true\n    });\n    // Add welcome messages for each room\n    const welcomeMessages = {\n        general: [\n            {\n                id: \"welcome-general-1\",\n                user: \"DevTea Bot\",\n                content: \"Welcome to the General discussion room! \\uD83D\\uDC4B This is where developers from all backgrounds come together to chat.\",\n                timestamp: Date.now() - 3600000,\n                type: \"room\",\n                roomId: \"general\"\n            },\n            {\n                id: \"welcome-general-2\",\n                user: \"DevTea Bot\",\n                content: \"\\uD83D\\uDCA1 Tip: You can join/leave rooms, create new ones, and send direct messages. Use the search to find rooms!\",\n                timestamp: Date.now() - 3500000,\n                type: \"room\",\n                roomId: \"general\"\n            }\n        ],\n        frontend: [\n            {\n                id: \"welcome-frontend-1\",\n                user: \"DevTea Bot\",\n                content: \"Welcome to Frontend Devs! \\uD83D\\uDE80 Share your React, Vue, Angular tips and discuss the latest in frontend development.\",\n                timestamp: Date.now() - 3600000,\n                type: \"room\",\n                roomId: \"frontend\"\n            },\n            {\n                id: \"welcome-frontend-2\",\n                user: \"DevTea Bot\",\n                content: \"\\uD83D\\uDD25 Hot topics: Component libraries, state management, performance optimization, and modern CSS!\",\n                timestamp: Date.now() - 3400000,\n                type: \"room\",\n                roomId: \"frontend\"\n            }\n        ],\n        backend: [\n            {\n                id: \"welcome-backend-1\",\n                user: \"DevTea Bot\",\n                content: \"Welcome to Backend Devs! \\uD83D\\uDD27 Discuss APIs, databases, server architecture, and backend best practices.\",\n                timestamp: Date.now() - 3600000,\n                type: \"room\",\n                roomId: \"backend\"\n            },\n            {\n                id: \"welcome-backend-2\",\n                user: \"DevTea Bot\",\n                content: \"\\uD83D\\uDCBE Popular topics: Microservices, database design, API security, and scalability patterns!\",\n                timestamp: Date.now() - 3300000,\n                type: \"room\",\n                roomId: \"backend\"\n            }\n        ],\n        mobile: [\n            {\n                id: \"welcome-mobile-1\",\n                user: \"DevTea Bot\",\n                content: \"Welcome to Mobile Development! \\uD83D\\uDCF1 Discuss iOS, Android, React Native, Flutter, and mobile best practices.\",\n                timestamp: Date.now() - 3600000,\n                type: \"room\",\n                roomId: \"mobile\"\n            }\n        ],\n        devops: [\n            {\n                id: \"welcome-devops-1\",\n                user: \"DevTea Bot\",\n                content: \"Welcome to DevOps & Infrastructure! ⚙️ Share knowledge about CI/CD, containerization, and cloud platforms.\",\n                timestamp: Date.now() - 3600000,\n                type: \"room\",\n                roomId: \"devops\"\n            }\n        ]\n    };\n    // Set welcome messages for each room\n    Object.entries(welcomeMessages).forEach(([roomId, roomMessages])=>{\n        messages.set(roomId, roomMessages);\n    });\n    console.log(`Initialized ${rooms.size} rooms with welcome messages`);\n}\nasync function GET(request) {\n    const upgrade = request.headers.get(\"upgrade\");\n    if (upgrade !== \"websocket\") {\n        return new Response(\"Expected websocket\", {\n            status: 400\n        });\n    }\n    return new Response(\"WebSocket upgrade not supported in development mode\", {\n        status: 501\n    });\n}\nasync function POST(request) {\n    try {\n        const { type, data, userId } = await request.json();\n        console.log(`API Request: ${type}`, {\n            userId,\n            data\n        });\n        switch(type){\n            case \"register\":\n                const existingClient = clients.get(data.userId);\n                const existingRooms = userRoomMemberships.get(data.userId) || new Set();\n                clients.set(data.userId, {\n                    userId: data.userId,\n                    username: data.username,\n                    lastSeen: Date.now(),\n                    joinedRooms: existingRooms\n                });\n                // Restore user to their previously joined rooms\n                existingRooms.forEach((roomId)=>{\n                    const room = rooms.get(roomId);\n                    if (room) {\n                        room.members.add(data.userId);\n                    }\n                });\n                console.log(`User registered: ${data.username} (${data.userId}), restored to ${existingRooms.size} rooms`);\n                return Response.json({\n                    success: true,\n                    type: \"registered\",\n                    data: {\n                        joinedRooms: Array.from(existingRooms),\n                        availableRooms: Array.from(rooms.keys())\n                    }\n                });\n            case \"join_room\":\n                const client = clients.get(userId);\n                if (!client) {\n                    return Response.json({\n                        success: false,\n                        error: \"User not found\"\n                    });\n                }\n                const room = rooms.get(data.roomId);\n                if (!room) {\n                    return Response.json({\n                        success: false,\n                        error: \"Room not found\"\n                    });\n                }\n                // Update client state\n                client.currentRoom = data.roomId;\n                client.lastSeen = Date.now();\n                room.members.add(userId);\n                client.joinedRooms.add(data.roomId);\n                // Persist membership\n                if (!userRoomMemberships.has(userId)) {\n                    userRoomMemberships.set(userId, new Set());\n                }\n                userRoomMemberships.get(userId).add(data.roomId);\n                const roomMessages = messages.get(data.roomId) || [];\n                console.log(`User ${client.username} joined room ${data.roomId}, found ${roomMessages.length} messages`);\n                return Response.json({\n                    success: true,\n                    type: \"room_joined\",\n                    data: {\n                        roomId: data.roomId,\n                        messages: roomMessages,\n                        memberCount: room.members.size\n                    }\n                });\n            case \"leave_room\":\n                const leavingClient = clients.get(userId);\n                if (!leavingClient) {\n                    return Response.json({\n                        success: false,\n                        error: \"User not found\"\n                    });\n                }\n                const leavingRoom = rooms.get(data.roomId);\n                if (!leavingRoom) {\n                    return Response.json({\n                        success: false,\n                        error: \"Room not found\"\n                    });\n                }\n                leavingRoom.members.delete(userId);\n                leavingClient.joinedRooms.delete(data.roomId);\n                // Persist the leave\n                const userMemberships = userRoomMemberships.get(userId);\n                if (userMemberships) {\n                    userMemberships.delete(data.roomId);\n                }\n                if (leavingClient.currentRoom === data.roomId) {\n                    leavingClient.currentRoom = undefined;\n                }\n                console.log(`User ${leavingClient.username} left room ${data.roomId}`);\n                return Response.json({\n                    success: true,\n                    type: \"room_left\",\n                    data: {\n                        roomId: data.roomId,\n                        memberCount: leavingRoom.members.size\n                    }\n                });\n            case \"send_message\":\n                console.log(\"=== API: Processing send_message ===\");\n                console.log(\"User ID:\", userId);\n                console.log(\"Message data:\", data);\n                const sender = clients.get(userId);\n                if (!sender) {\n                    console.error(\"Sender not found:\", userId);\n                    return Response.json({\n                        success: false,\n                        error: \"User not found\"\n                    });\n                }\n                const newMessage = {\n                    id: crypto.randomUUID(),\n                    user: data.username,\n                    content: data.content,\n                    timestamp: Date.now(),\n                    type: data.type,\n                    roomId: data.roomId,\n                    recipientId: data.recipientId\n                };\n                if (data.type === \"room\") {\n                    console.log(\"Processing room message for room:\", data.roomId);\n                    const targetRoom = rooms.get(data.roomId);\n                    if (!targetRoom) {\n                        console.error(\"Room not found:\", data.roomId);\n                        console.log(\"Available rooms:\", Array.from(rooms.keys()));\n                        return Response.json({\n                            success: false,\n                            error: \"Room not found\"\n                        });\n                    }\n                    // If user is not in the room, add them (this helps with newly created rooms)\n                    if (!targetRoom.members.has(userId)) {\n                        console.log(`Auto-adding user ${userId} (${sender.username}) to room ${data.roomId} for messaging`);\n                        targetRoom.members.add(userId);\n                        // Also update client's joined rooms\n                        sender.joinedRooms.add(data.roomId);\n                        // Update persistent memberships\n                        if (!userRoomMemberships.has(userId)) {\n                            userRoomMemberships.set(userId, new Set());\n                        }\n                        userRoomMemberships.get(userId).add(data.roomId);\n                    }\n                    // Initialize message array if it doesn't exist\n                    if (!messages.has(data.roomId)) {\n                        console.log(`Initializing message array for room ${data.roomId}`);\n                        messages.set(data.roomId, []);\n                    }\n                    const roomMessages = messages.get(data.roomId) || [];\n                    roomMessages.push(newMessage);\n                    messages.set(data.roomId, roomMessages);\n                    console.log(`Message added to room ${data.roomId}. Total messages: ${roomMessages.length}`);\n                    console.log(`Room ${data.roomId} members:`, Array.from(targetRoom.members));\n                } else {\n                    // Direct message logic remains the same\n                    const dmId = getDMId(userId, data.recipientId);\n                    const dmMessages = messages.get(dmId) || [];\n                    dmMessages.push(newMessage);\n                    messages.set(dmId, dmMessages);\n                    console.log(`DM sent from ${userId} to ${data.recipientId}: ${data.content}`);\n                }\n                console.log(\"Message processed successfully:\", newMessage);\n                return Response.json({\n                    success: true,\n                    type: \"message_sent\",\n                    data: newMessage\n                });\n            case \"get_messages\":\n                if (data.type === \"room\") {\n                    const requestingClient = clients.get(userId);\n                    const requestedRoom = rooms.get(data.roomId);\n                    if (!requestingClient || !requestedRoom) {\n                        return Response.json({\n                            success: false,\n                            error: \"Room or user not found\"\n                        });\n                    }\n                    // Auto-join user to room if not already a member\n                    if (!requestedRoom.members.has(userId)) {\n                        requestedRoom.members.add(userId);\n                        requestingClient.joinedRooms.add(data.roomId);\n                        requestingClient.currentRoom = data.roomId;\n                        // Update persistent memberships\n                        if (!userRoomMemberships.has(userId)) {\n                            userRoomMemberships.set(userId, new Set());\n                        }\n                        userRoomMemberships.get(userId).add(data.roomId);\n                    }\n                    // Initialize message array if it doesn't exist\n                    if (!messages.has(data.roomId)) {\n                        console.log(`Initializing empty message array for room ${data.roomId}`);\n                        messages.set(data.roomId, []);\n                    }\n                    const roomMessages = messages.get(data.roomId) || [];\n                    return Response.json({\n                        success: true,\n                        type: \"room_messages\",\n                        data: {\n                            roomId: data.roomId,\n                            messages: roomMessages,\n                            memberCount: requestedRoom.members.size\n                        }\n                    });\n                } else {\n                    // Direct messages\n                    const dmId = getDMId(userId, data.recipientId);\n                    const dmMessages = messages.get(dmId) || [];\n                    return Response.json({\n                        success: true,\n                        type: \"dm_messages\",\n                        data: {\n                            recipientId: data.recipientId,\n                            messages: dmMessages\n                        }\n                    });\n                }\n            case \"search_rooms\":\n                const query = data.query?.toLowerCase() || \"\";\n                const searchResults = Array.from(rooms.values()).filter((room)=>room.isPublic && (room.name.toLowerCase().includes(query) || room.description.toLowerCase().includes(query) || room.id.toLowerCase().includes(query))).map((room)=>({\n                        id: room.id,\n                        name: room.name,\n                        description: room.description,\n                        memberCount: room.members.size,\n                        isMember: room.members.has(userId)\n                    }));\n                return Response.json({\n                    success: true,\n                    type: \"search_results\",\n                    data: {\n                        rooms: searchResults,\n                        query\n                    }\n                });\n            case \"create_room\":\n                const creator = clients.get(userId);\n                if (!creator) {\n                    return Response.json({\n                        success: false,\n                        error: \"User not found\"\n                    });\n                }\n                const roomId = data.name.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\");\n                if (rooms.has(roomId)) {\n                    return Response.json({\n                        success: false,\n                        error: \"Room already exists\"\n                    });\n                }\n                const newRoom = {\n                    id: roomId,\n                    name: data.name,\n                    description: data.description || \"\",\n                    createdBy: userId,\n                    createdAt: Date.now(),\n                    members: new Set([\n                        userId\n                    ]),\n                    isPrivate: false,\n                    isPublic: true\n                };\n                rooms.set(roomId, newRoom);\n                creator.joinedRooms.add(roomId);\n                creator.currentRoom = roomId;\n                // Persist membership for creator\n                if (!userRoomMemberships.has(userId)) {\n                    userRoomMemberships.set(userId, new Set());\n                }\n                userRoomMemberships.get(userId).add(roomId);\n                // Add welcome message to new room\n                const welcomeMessage = {\n                    id: crypto.randomUUID(),\n                    user: \"DevTea Bot\",\n                    content: `Welcome to ${data.name}! 🎉 This room was created by ${creator.username}. ${data.description || \"Start chatting!\"}`,\n                    timestamp: Date.now(),\n                    type: \"room\",\n                    roomId: roomId\n                };\n                messages.set(roomId, [\n                    welcomeMessage\n                ]);\n                console.log(`Room ${roomId} initialized with welcome message. Current rooms with messages:`, Array.from(messages.keys()));\n                console.log(`Room created: ${roomId} by ${creator.username}`);\n                return Response.json({\n                    success: true,\n                    type: \"room_created\",\n                    data: {\n                        ...newRoom,\n                        members: Array.from(newRoom.members),\n                        memberCount: newRoom.members.size\n                    }\n                });\n            case \"get_rooms\":\n                const userClient = clients.get(userId);\n                const publicRooms = Array.from(rooms.values()).filter((room)=>room.isPublic).map((room)=>({\n                        id: room.id,\n                        name: room.name,\n                        description: room.description,\n                        memberCount: room.members.size,\n                        isMember: userClient ? room.members.has(userId) : false,\n                        isJoined: userClient ? userClient.joinedRooms.has(room.id) : false\n                    }));\n                return Response.json({\n                    success: true,\n                    type: \"rooms_list\",\n                    data: {\n                        rooms: publicRooms\n                    }\n                });\n            case \"get_joined_rooms\":\n                const joinedClient = clients.get(userId);\n                if (!joinedClient) {\n                    return Response.json({\n                        success: false,\n                        error: \"User not found\"\n                    });\n                }\n                const joinedRooms = Array.from(joinedClient.joinedRooms).map((roomId)=>rooms.get(roomId)).filter(Boolean).map((room)=>({\n                        id: room.id,\n                        name: room.name,\n                        description: room.description,\n                        memberCount: room.members.size,\n                        isMember: true,\n                        isJoined: true\n                    }));\n                return Response.json({\n                    success: true,\n                    type: \"joined_rooms\",\n                    data: {\n                        rooms: joinedRooms\n                    }\n                });\n            case \"edit_message\":\n                const editResult = editMessage(data.messageId, data.content, data.roomId, data.recipientId, userId);\n                return Response.json(editResult);\n            case \"delete_message\":\n                const deleteResult = deleteMessage(data.messageId, data.roomId, data.recipientId, userId);\n                return Response.json(deleteResult);\n            case \"get_online_users\":\n                const onlineUsers = Array.from(clients.values()).filter((client)=>Date.now() - client.lastSeen < 300000) // 5 minutes\n                .map((client)=>({\n                        userId: client.userId,\n                        username: client.username,\n                        currentRoom: client.currentRoom,\n                        joinedRooms: Array.from(client.joinedRooms)\n                    }));\n                return Response.json({\n                    success: true,\n                    type: \"online_users\",\n                    data: {\n                        users: onlineUsers\n                    }\n                });\n            case \"get_room_members\":\n                const targetRoom = rooms.get(data.roomId);\n                if (!targetRoom) {\n                    return Response.json({\n                        success: false,\n                        error: \"Room not found\"\n                    });\n                }\n                const members = Array.from(targetRoom.members).map((memberId)=>clients.get(memberId)).filter(Boolean).map((member)=>({\n                        userId: member.userId,\n                        username: member.username,\n                        isOnline: Date.now() - member.lastSeen < 300000\n                    }));\n                return Response.json({\n                    success: true,\n                    type: \"room_members\",\n                    data: {\n                        roomId: data.roomId,\n                        members\n                    }\n                });\n            default:\n                return Response.json({\n                    success: false,\n                    error: \"Unknown message type\"\n                }, {\n                    status: 500\n                });\n        }\n    } catch (error) {\n        console.error(\"WebSocket API error:\", error);\n        return Response.json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\nfunction getDMId(userId1, userId2) {\n    return [\n        userId1,\n        userId2\n    ].sort().join(\"-dm-\");\n}\nfunction editMessage(messageId, content, roomId, recipientId, userId) {\n    const targetId = roomId || getDMId(userId, recipientId);\n    const targetMessages = messages.get(targetId) || [];\n    const messageIndex = targetMessages.findIndex((m)=>m.id === messageId);\n    if (messageIndex !== -1) {\n        const message = targetMessages[messageIndex];\n        const userClient = clients.get(userId);\n        if (message.user === userClient?.username) {\n            targetMessages[messageIndex] = {\n                ...message,\n                content,\n                edited: true\n            };\n            return {\n                success: true,\n                type: \"message_edited\",\n                data: targetMessages[messageIndex]\n            };\n        }\n    }\n    return {\n        success: false,\n        error: \"Message not found or unauthorized\"\n    };\n}\nfunction deleteMessage(messageId, roomId, recipientId, userId) {\n    const targetId = roomId || getDMId(userId, recipientId);\n    const targetMessages = messages.get(targetId) || [];\n    const messageIndex = targetMessages.findIndex((m)=>m.id === messageId);\n    if (messageIndex !== -1) {\n        const message = targetMessages[messageIndex];\n        const userClient = clients.get(userId);\n        if (message.user === userClient?.username) {\n            targetMessages.splice(messageIndex, 1);\n            return {\n                success: true,\n                type: \"message_deleted\",\n                data: {\n                    messageId\n                }\n            };\n        }\n    }\n    return {\n        success: false,\n        error: \"Message not found or unauthorized\"\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/websocket/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fwebsocket%2Froute&page=%2Fapi%2Fwebsocket%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fwebsocket%2Froute.ts&appDir=T%3A%5CDevTea%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=T%3A%5CDevTea&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();