"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/websocket-client.ts":
/*!*********************************!*\
  !*** ./lib/websocket-client.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevTeaWebSocketClient: function() { return /* binding */ DevTeaWebSocketClient; }\n/* harmony export */ });\nclass DevTeaWebSocketClient {\n    async connect() {\n        console.log(\"Connecting WebSocket client...\");\n        // Register user\n        const result = await this.sendMessage(\"register\", {\n            userId: this.userId,\n            username: this.username\n        });\n        if (result.success) {\n            var _result_data;\n            // Restore joined rooms from registration response\n            if ((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.joinedRooms) {\n                this.persistedRooms = new Set(result.data.joinedRooms);\n                console.log(\"Restored rooms:\", Array.from(this.persistedRooms));\n            }\n            // Start polling for updates\n            this.startPolling();\n            this.onMessage({\n                type: \"connected\",\n                data: {\n                    joinedRooms: Array.from(this.persistedRooms)\n                }\n            });\n            console.log(\"WebSocket client connected successfully\");\n        } else {\n            console.error(\"Failed to register user\");\n        }\n    }\n    async sendMessage(type, data) {\n        try {\n            console.log(\"Sending message: \".concat(type), data);\n            const response = await fetch(\"/api/websocket\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    type,\n                    data,\n                    userId: this.userId\n                })\n            });\n            const result = await response.json();\n            console.log(\"Response for \".concat(type, \":\"), result);\n            if (result.success && result.type) {\n                this.onMessage(result);\n            }\n            return result;\n        } catch (error) {\n            console.error(\"WebSocket send error:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    async joinRoom(roomId) {\n        console.log(\"Joining room: \".concat(roomId));\n        this.currentRoom = roomId;\n        this.currentContext = {\n            type: \"room\",\n            id: roomId\n        };\n        this.persistedRooms.add(roomId);\n        return this.sendMessage(\"join_room\", {\n            roomId\n        });\n    }\n    async leaveRoom(roomId) {\n        console.log(\"Leaving room: \".concat(roomId));\n        const result = await this.sendMessage(\"leave_room\", {\n            roomId\n        });\n        if (result.success) {\n            this.persistedRooms.delete(roomId);\n            if (this.currentRoom === roomId) {\n                this.currentRoom = null;\n                this.currentContext = null;\n            }\n        }\n        return result;\n    }\n    async searchRooms(query) {\n        return this.sendMessage(\"search_rooms\", {\n            query\n        });\n    }\n    async createRoom(name, description) {\n        var _result_data;\n        const result = await this.sendMessage(\"create_room\", {\n            name,\n            description\n        });\n        if (result.success && ((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.id)) {\n            this.persistedRooms.add(result.data.id);\n        }\n        return result;\n    }\n    async getRooms() {\n        return this.sendMessage(\"get_rooms\", {});\n    }\n    async getJoinedRooms() {\n        return this.sendMessage(\"get_joined_rooms\", {});\n    }\n    async getRoomMembers(roomId) {\n        return this.sendMessage(\"get_room_members\", {\n            roomId\n        });\n    }\n    async sendChatMessage(content, type, roomId, recipientId) {\n        console.log(\"Sending chat message to \".concat(type, \":\"), {\n            content,\n            roomId,\n            recipientId\n        });\n        return this.sendMessage(\"send_message\", {\n            username: this.username,\n            content,\n            type,\n            roomId,\n            recipientId\n        });\n    }\n    async getMessages(type, roomId, recipientId) {\n        console.log(\"Getting messages for \".concat(type, \":\"), {\n            roomId,\n            recipientId\n        });\n        this.currentContext = {\n            type,\n            id: roomId || recipientId || \"\"\n        };\n        return this.sendMessage(\"get_messages\", {\n            type,\n            roomId,\n            recipientId\n        });\n    }\n    async editMessage(messageId, content, roomId, recipientId) {\n        return this.sendMessage(\"edit_message\", {\n            messageId,\n            content,\n            roomId,\n            recipientId\n        });\n    }\n    async deleteMessage(messageId, roomId, recipientId) {\n        return this.sendMessage(\"delete_message\", {\n            messageId,\n            roomId,\n            recipientId\n        });\n    }\n    async getOnlineUsers() {\n        return this.sendMessage(\"get_online_users\", {});\n    }\n    getPersistedRooms() {\n        return Array.from(this.persistedRooms);\n    }\n    startPolling() {\n        // Poll for updates every 2 seconds to simulate real-time\n        this.pollInterval = setInterval(async ()=>{\n            try {\n                // Get latest messages for current context\n                if (this.currentContext) {\n                    if (this.currentContext.type === \"room\") {\n                        const result = await this.sendMessage(\"get_messages\", {\n                            type: \"room\",\n                            roomId: this.currentContext.id\n                        });\n                        if (result.success && result.type === \"room_messages\") {\n                            this.onMessage({\n                                type: \"room_messages_update\",\n                                data: result.data\n                            });\n                        }\n                    } else if (this.currentContext.type === \"dm\") {\n                        const result = await this.sendMessage(\"get_messages\", {\n                            type: \"dm\",\n                            recipientId: this.currentContext.id\n                        });\n                        if (result.success && result.type === \"dm_messages\") {\n                            this.onMessage({\n                                type: \"dm_messages_update\",\n                                data: result.data\n                            });\n                        }\n                    }\n                }\n                // Get online users periodically\n                await this.getOnlineUsers();\n            } catch (error) {\n                console.error(\"Polling error:\", error);\n            }\n        }, 2000);\n    }\n    disconnect() {\n        console.log(\"Disconnecting WebSocket client...\");\n        if (this.pollInterval) {\n            clearInterval(this.pollInterval);\n            this.pollInterval = null;\n        }\n        this.currentRoom = null;\n        this.currentContext = null;\n        this.onMessage({\n            type: \"disconnected\"\n        });\n    }\n    constructor(userId, username, onMessage){\n        this.pollInterval = null;\n        this.currentRoom = null;\n        this.currentContext = null;\n        this.persistedRooms = new Set();\n        this.userId = userId;\n        this.username = username;\n        this.onMessage = onMessage;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi93ZWJzb2NrZXQtY2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFvQk8sTUFBTUE7SUFlWCxNQUFNQyxVQUFVO1FBQ2RDLFFBQVFDLEdBQUcsQ0FBQztRQUNaLGdCQUFnQjtRQUNoQixNQUFNQyxTQUFTLE1BQU0sSUFBSSxDQUFDQyxXQUFXLENBQUMsWUFBWTtZQUFFQyxRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUFFQyxVQUFVLElBQUksQ0FBQ0EsUUFBUTtRQUFDO1FBRWpHLElBQUlILE9BQU9JLE9BQU8sRUFBRTtnQkFFZEo7WUFESixrREFBa0Q7WUFDbEQsS0FBSUEsZUFBQUEsT0FBT0ssSUFBSSxjQUFYTCxtQ0FBQUEsYUFBYU0sV0FBVyxFQUFFO2dCQUM1QixJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJQyxJQUFJUixPQUFPSyxJQUFJLENBQUNDLFdBQVc7Z0JBQ3JEUixRQUFRQyxHQUFHLENBQUMsbUJBQW1CVSxNQUFNQyxJQUFJLENBQUMsSUFBSSxDQUFDSCxjQUFjO1lBQy9EO1lBRUEsNEJBQTRCO1lBQzVCLElBQUksQ0FBQ0ksWUFBWTtZQUNqQixJQUFJLENBQUNDLFNBQVMsQ0FBQztnQkFBRUMsTUFBTTtnQkFBYVIsTUFBTTtvQkFBRUMsYUFBYUcsTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQ0gsY0FBYztnQkFBRTtZQUFFO1lBQzNGVCxRQUFRQyxHQUFHLENBQUM7UUFDZCxPQUFPO1lBQ0xELFFBQVFnQixLQUFLLENBQUM7UUFDaEI7SUFDRjtJQUVBLE1BQU1iLFlBQVlZLElBQVksRUFBRVIsSUFBUyxFQUFFO1FBQ3pDLElBQUk7WUFDRlAsUUFBUUMsR0FBRyxDQUFDLG9CQUF5QixPQUFMYyxPQUFRUjtZQUN4QyxNQUFNVSxXQUFXLE1BQU1DLE1BQU0sa0JBQWtCO2dCQUM3Q0MsUUFBUTtnQkFDUkMsU0FBUztvQkFBRSxnQkFBZ0I7Z0JBQW1CO2dCQUM5Q0MsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO29C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QUFJLENBQUNTLFNBQVMsR0FBR0E7SUFDbkI7QUFpTEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL3dlYnNvY2tldC1jbGllbnQudHM/NzA1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgTWVzc2FnZSB7XG4gIGlkOiBzdHJpbmdcbiAgdXNlcjogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICB0aW1lc3RhbXA6IG51bWJlclxuICBlZGl0ZWQ/OiBib29sZWFuXG4gIHJvb21JZD86IHN0cmluZ1xuICByZWNpcGllbnRJZD86IHN0cmluZ1xuICB0eXBlOiBcInJvb21cIiB8IFwiZG1cIlxufVxuXG5pbnRlcmZhY2UgUm9vbSB7XG4gIGlkOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgbWVtYmVyQ291bnQ6IG51bWJlclxuICBpc01lbWJlcjogYm9vbGVhblxuICBpc0pvaW5lZDogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgRGV2VGVhV2ViU29ja2V0Q2xpZW50IHtcbiAgcHJpdmF0ZSB1c2VySWQ6IHN0cmluZ1xuICBwcml2YXRlIHVzZXJuYW1lOiBzdHJpbmdcbiAgcHJpdmF0ZSBvbk1lc3NhZ2U6IChtZXNzYWdlOiBhbnkpID0+IHZvaWRcbiAgcHJpdmF0ZSBwb2xsSW50ZXJ2YWw6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBjdXJyZW50Um9vbTogc3RyaW5nIHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBjdXJyZW50Q29udGV4dDogeyB0eXBlOiBcInJvb21cIiB8IFwiZG1cIjsgaWQ6IHN0cmluZyB9IHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBwZXJzaXN0ZWRSb29tczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KClcblxuICBjb25zdHJ1Y3Rvcih1c2VySWQ6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZywgb25NZXNzYWdlOiAobWVzc2FnZTogYW55KSA9PiB2b2lkKSB7XG4gICAgdGhpcy51c2VySWQgPSB1c2VySWRcbiAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWVcbiAgICB0aGlzLm9uTWVzc2FnZSA9IG9uTWVzc2FnZVxuICB9XG5cbiAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3RpbmcgV2ViU29ja2V0IGNsaWVudC4uLlwiKVxuICAgIC8vIFJlZ2lzdGVyIHVzZXJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRNZXNzYWdlKFwicmVnaXN0ZXJcIiwgeyB1c2VySWQ6IHRoaXMudXNlcklkLCB1c2VybmFtZTogdGhpcy51c2VybmFtZSB9KVxuXG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAvLyBSZXN0b3JlIGpvaW5lZCByb29tcyBmcm9tIHJlZ2lzdHJhdGlvbiByZXNwb25zZVxuICAgICAgaWYgKHJlc3VsdC5kYXRhPy5qb2luZWRSb29tcykge1xuICAgICAgICB0aGlzLnBlcnNpc3RlZFJvb21zID0gbmV3IFNldChyZXN1bHQuZGF0YS5qb2luZWRSb29tcylcbiAgICAgICAgY29uc29sZS5sb2coXCJSZXN0b3JlZCByb29tczpcIiwgQXJyYXkuZnJvbSh0aGlzLnBlcnNpc3RlZFJvb21zKSlcbiAgICAgIH1cblxuICAgICAgLy8gU3RhcnQgcG9sbGluZyBmb3IgdXBkYXRlc1xuICAgICAgdGhpcy5zdGFydFBvbGxpbmcoKVxuICAgICAgdGhpcy5vbk1lc3NhZ2UoeyB0eXBlOiBcImNvbm5lY3RlZFwiLCBkYXRhOiB7IGpvaW5lZFJvb21zOiBBcnJheS5mcm9tKHRoaXMucGVyc2lzdGVkUm9vbXMpIH0gfSlcbiAgICAgIGNvbnNvbGUubG9nKFwiV2ViU29ja2V0IGNsaWVudCBjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5XCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gcmVnaXN0ZXIgdXNlclwiKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNlbmRNZXNzYWdlKHR5cGU6IHN0cmluZywgZGF0YTogYW55KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGBTZW5kaW5nIG1lc3NhZ2U6ICR7dHlwZX1gLCBkYXRhKVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcIi9hcGkvd2Vic29ja2V0XCIsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHR5cGUsIGRhdGEsIHVzZXJJZDogdGhpcy51c2VySWQgfSksXG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgIGNvbnNvbGUubG9nKGBSZXNwb25zZSBmb3IgJHt0eXBlfTpgLCByZXN1bHQpXG5cbiAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQudHlwZSkge1xuICAgICAgICB0aGlzLm9uTWVzc2FnZShyZXN1bHQpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIldlYlNvY2tldCBzZW5kIGVycm9yOlwiLCBlcnJvcilcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvciB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgam9pblJvb20ocm9vbUlkOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmxvZyhgSm9pbmluZyByb29tOiAke3Jvb21JZH1gKVxuICAgIHRoaXMuY3VycmVudFJvb20gPSByb29tSWRcbiAgICB0aGlzLmN1cnJlbnRDb250ZXh0ID0geyB0eXBlOiBcInJvb21cIiwgaWQ6IHJvb21JZCB9XG4gICAgdGhpcy5wZXJzaXN0ZWRSb29tcy5hZGQocm9vbUlkKVxuICAgIHJldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwiam9pbl9yb29tXCIsIHsgcm9vbUlkIH0pXG4gIH1cblxuICBhc3luYyBsZWF2ZVJvb20ocm9vbUlkOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmxvZyhgTGVhdmluZyByb29tOiAke3Jvb21JZH1gKVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZE1lc3NhZ2UoXCJsZWF2ZV9yb29tXCIsIHsgcm9vbUlkIH0pXG5cbiAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHRoaXMucGVyc2lzdGVkUm9vbXMuZGVsZXRlKHJvb21JZClcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRSb29tID09PSByb29tSWQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Um9vbSA9IG51bGxcbiAgICAgICAgdGhpcy5jdXJyZW50Q29udGV4dCA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBhc3luYyBzZWFyY2hSb29tcyhxdWVyeTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UoXCJzZWFyY2hfcm9vbXNcIiwgeyBxdWVyeSB9KVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlUm9vbShuYW1lOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRNZXNzYWdlKFwiY3JlYXRlX3Jvb21cIiwgeyBuYW1lLCBkZXNjcmlwdGlvbiB9KVxuICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQuZGF0YT8uaWQpIHtcbiAgICAgIHRoaXMucGVyc2lzdGVkUm9vbXMuYWRkKHJlc3VsdC5kYXRhLmlkKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBhc3luYyBnZXRSb29tcygpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kTWVzc2FnZShcImdldF9yb29tc1wiLCB7fSlcbiAgfVxuXG4gIGFzeW5jIGdldEpvaW5lZFJvb21zKCkge1xuICAgIHJldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwiZ2V0X2pvaW5lZF9yb29tc1wiLCB7fSlcbiAgfVxuXG4gIGFzeW5jIGdldFJvb21NZW1iZXJzKHJvb21JZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UoXCJnZXRfcm9vbV9tZW1iZXJzXCIsIHsgcm9vbUlkIH0pXG4gIH1cblxuICBhc3luYyBzZW5kQ2hhdE1lc3NhZ2UoY29udGVudDogc3RyaW5nLCB0eXBlOiBcInJvb21cIiB8IFwiZG1cIiwgcm9vbUlkPzogc3RyaW5nLCByZWNpcGllbnRJZD86IHN0cmluZykge1xuICAgIGNvbnNvbGUubG9nKGBTZW5kaW5nIGNoYXQgbWVzc2FnZSB0byAke3R5cGV9OmAsIHsgY29udGVudCwgcm9vbUlkLCByZWNpcGllbnRJZCB9KVxuICAgIHJldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwic2VuZF9tZXNzYWdlXCIsIHtcbiAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLFxuICAgICAgY29udGVudCxcbiAgICAgIHR5cGUsXG4gICAgICByb29tSWQsXG4gICAgICByZWNpcGllbnRJZCxcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgZ2V0TWVzc2FnZXModHlwZTogXCJyb29tXCIgfCBcImRtXCIsIHJvb21JZD86IHN0cmluZywgcmVjaXBpZW50SWQ/OiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmxvZyhgR2V0dGluZyBtZXNzYWdlcyBmb3IgJHt0eXBlfTpgLCB7IHJvb21JZCwgcmVjaXBpZW50SWQgfSlcbiAgICB0aGlzLmN1cnJlbnRDb250ZXh0ID0geyB0eXBlLCBpZDogcm9vbUlkIHx8IHJlY2lwaWVudElkIHx8IFwiXCIgfVxuICAgIHJldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwiZ2V0X21lc3NhZ2VzXCIsIHsgdHlwZSwgcm9vbUlkLCByZWNpcGllbnRJZCB9KVxuICB9XG5cbiAgYXN5bmMgZWRpdE1lc3NhZ2UobWVzc2FnZUlkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgcm9vbUlkPzogc3RyaW5nLCByZWNpcGllbnRJZD86IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnNlbmRNZXNzYWdlKFwiZWRpdF9tZXNzYWdlXCIsIHsgbWVzc2FnZUlkLCBjb250ZW50LCByb29tSWQsIHJlY2lwaWVudElkIH0pXG4gIH1cblxuICBhc3luYyBkZWxldGVNZXNzYWdlKG1lc3NhZ2VJZDogc3RyaW5nLCByb29tSWQ/OiBzdHJpbmcsIHJlY2lwaWVudElkPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UoXCJkZWxldGVfbWVzc2FnZVwiLCB7IG1lc3NhZ2VJZCwgcm9vbUlkLCByZWNpcGllbnRJZCB9KVxuICB9XG5cbiAgYXN5bmMgZ2V0T25saW5lVXNlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2UoXCJnZXRfb25saW5lX3VzZXJzXCIsIHt9KVxuICB9XG5cbiAgZ2V0UGVyc2lzdGVkUm9vbXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGVyc2lzdGVkUm9vbXMpXG4gIH1cblxuICBwcml2YXRlIHN0YXJ0UG9sbGluZygpIHtcbiAgICAvLyBQb2xsIGZvciB1cGRhdGVzIGV2ZXJ5IDIgc2Vjb25kcyB0byBzaW11bGF0ZSByZWFsLXRpbWVcbiAgICB0aGlzLnBvbGxJbnRlcnZhbCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEdldCBsYXRlc3QgbWVzc2FnZXMgZm9yIGN1cnJlbnQgY29udGV4dFxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29udGV4dCkge1xuICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb250ZXh0LnR5cGUgPT09IFwicm9vbVwiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRNZXNzYWdlKFwiZ2V0X21lc3NhZ2VzXCIsIHtcbiAgICAgICAgICAgICAgdHlwZTogXCJyb29tXCIsXG4gICAgICAgICAgICAgIHJvb21JZDogdGhpcy5jdXJyZW50Q29udGV4dC5pZCxcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQudHlwZSA9PT0gXCJyb29tX21lc3NhZ2VzXCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicm9vbV9tZXNzYWdlc191cGRhdGVcIixcbiAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudENvbnRleHQudHlwZSA9PT0gXCJkbVwiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRNZXNzYWdlKFwiZ2V0X21lc3NhZ2VzXCIsIHtcbiAgICAgICAgICAgICAgdHlwZTogXCJkbVwiLFxuICAgICAgICAgICAgICByZWNpcGllbnRJZDogdGhpcy5jdXJyZW50Q29udGV4dC5pZCxcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQudHlwZSA9PT0gXCJkbV9tZXNzYWdlc1wiKSB7XG4gICAgICAgICAgICAgIHRoaXMub25NZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRtX21lc3NhZ2VzX3VwZGF0ZVwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBvbmxpbmUgdXNlcnMgcGVyaW9kaWNhbGx5XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0T25saW5lVXNlcnMoKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlBvbGxpbmcgZXJyb3I6XCIsIGVycm9yKVxuICAgICAgfVxuICAgIH0sIDIwMDApXG4gIH1cblxuICBkaXNjb25uZWN0KCkge1xuICAgIGNvbnNvbGUubG9nKFwiRGlzY29ubmVjdGluZyBXZWJTb2NrZXQgY2xpZW50Li4uXCIpXG4gICAgaWYgKHRoaXMucG9sbEludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMucG9sbEludGVydmFsKVxuICAgICAgdGhpcy5wb2xsSW50ZXJ2YWwgPSBudWxsXG4gICAgfVxuICAgIHRoaXMuY3VycmVudFJvb20gPSBudWxsXG4gICAgdGhpcy5jdXJyZW50Q29udGV4dCA9IG51bGxcbiAgICB0aGlzLm9uTWVzc2FnZSh7IHR5cGU6IFwiZGlzY29ubmVjdGVkXCIgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkRldlRlYVdlYlNvY2tldENsaWVudCIsImNvbm5lY3QiLCJjb25zb2xlIiwibG9nIiwicmVzdWx0Iiwic2VuZE1lc3NhZ2UiLCJ1c2VySWQiLCJ1c2VybmFtZSIsInN1Y2Nlc3MiLCJkYXRhIiwiam9pbmVkUm9vbXMiLCJwZXJzaXN0ZWRSb29tcyIsIlNldCIsIkFycmF5IiwiZnJvbSIsInN0YXJ0UG9sbGluZyIsIm9uTWVzc2FnZSIsInR5cGUiLCJlcnJvciIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc29uIiwiam9pblJvb20iLCJyb29tSWQiLCJjdXJyZW50Um9vbSIsImN1cnJlbnRDb250ZXh0IiwiaWQiLCJhZGQiLCJsZWF2ZVJvb20iLCJkZWxldGUiLCJzZWFyY2hSb29tcyIsInF1ZXJ5IiwiY3JlYXRlUm9vbSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImdldFJvb21zIiwiZ2V0Sm9pbmVkUm9vbXMiLCJnZXRSb29tTWVtYmVycyIsInNlbmRDaGF0TWVzc2FnZSIsImNvbnRlbnQiLCJyZWNpcGllbnRJZCIsImdldE1lc3NhZ2VzIiwiZWRpdE1lc3NhZ2UiLCJtZXNzYWdlSWQiLCJkZWxldGVNZXNzYWdlIiwiZ2V0T25saW5lVXNlcnMiLCJnZXRQZXJzaXN0ZWRSb29tcyIsInBvbGxJbnRlcnZhbCIsInNldEludGVydmFsIiwiZGlzY29ubmVjdCIsImNsZWFySW50ZXJ2YWwiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/websocket-client.ts\n"));

/***/ })

});