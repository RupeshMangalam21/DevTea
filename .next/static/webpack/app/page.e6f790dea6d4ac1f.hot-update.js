"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/websocket-client.ts":
/*!*********************************!*\
  !*** ./lib/websocket-client.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevTeaWebSocketClient: function() { return /* binding */ DevTeaWebSocketClient; }\n/* harmony export */ });\nclass DevTeaWebSocketClient {\n    async connect() {\n        console.log(\"Connecting WebSocket client...\");\n        this.isConnected = false;\n        this.retryCount = 0;\n        // Register user with retry logic\n        const result = await this.sendMessageWithRetry(\"register\", {\n            userId: this.userId,\n            username: this.username\n        });\n        if (result.success) {\n            var _result_data;\n            this.isConnected = true;\n            // Restore joined rooms from registration response\n            if ((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.joinedRooms) {\n                this.persistedRooms = new Set(result.data.joinedRooms);\n                console.log(\"Restored rooms:\", Array.from(this.persistedRooms));\n            }\n            // Start polling for updates\n            this.startPolling();\n            this.onMessage({\n                type: \"connected\",\n                data: {\n                    joinedRooms: Array.from(this.persistedRooms)\n                }\n            });\n            console.log(\"WebSocket client connected successfully\");\n        } else {\n            console.error(\"Failed to register user:\", result.error);\n            this.onMessage({\n                type: \"connection_failed\",\n                data: {\n                    error: result.error\n                }\n            });\n        }\n    }\n    async sendMessage(type, data) {\n        if (!this.isConnected && type !== \"register\") {\n            console.warn(\"Client not connected, attempting to reconnect...\");\n            await this.connect();\n        }\n        try {\n            console.log(\"Sending message: \".concat(type), data);\n            // Add timeout to the fetch request\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 10000) // 10 second timeout\n            ;\n            const response = await fetch(\"/api/websocket\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    type,\n                    data,\n                    userId: this.userId\n                }),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const result = await response.json();\n            console.log(\"Response for \".concat(type, \":\"), result);\n            if (result.success && result.type) {\n                this.onMessage(result);\n            }\n            // Reset retry count on successful request\n            this.retryCount = 0;\n            return result;\n        } catch (error) {\n            console.error(\"WebSocket send error:\", error);\n            // Handle specific error types\n            if (error.name === \"AbortError\") {\n                return {\n                    success: false,\n                    error: \"Request timeout\"\n                };\n            }\n            if (error.message.includes(\"ERR_INTERNET_DISCONNECTED\") || error.message.includes(\"ERR_NETWORK\") || error.message.includes(\"Failed to fetch\")) {\n                this.isConnected = false;\n                this.onMessage({\n                    type: \"connection_lost\",\n                    data: {\n                        error: error.message\n                    }\n                });\n                return {\n                    success: false,\n                    error: \"Network connection lost\"\n                };\n            }\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    async sendMessageWithRetry(type, data) {\n        let maxRetries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 3;\n        for(let attempt = 1; attempt <= maxRetries; attempt++){\n            var _result_error, _result_error1, _result_error2;\n            console.log(\"Attempt \".concat(attempt, \"/\").concat(maxRetries, \" for \").concat(type));\n            const result = await this.sendMessage(type, data);\n            if (result.success) {\n                return result;\n            }\n            // If it's a network error and we have retries left, wait and try again\n            if (attempt < maxRetries && (((_result_error = result.error) === null || _result_error === void 0 ? void 0 : _result_error.includes(\"Network\")) || ((_result_error1 = result.error) === null || _result_error1 === void 0 ? void 0 : _result_error1.includes(\"timeout\")) || ((_result_error2 = result.error) === null || _result_error2 === void 0 ? void 0 : _result_error2.includes(\"disconnected\")))) {\n                const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000) // Exponential backoff, max 5s\n                ;\n                console.log(\"Retrying in \".concat(delay, \"ms...\"));\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n                continue;\n            }\n            return result;\n        }\n        return {\n            success: false,\n            error: \"Max retries exceeded\"\n        };\n    }\n    async joinRoom(roomId) {\n        console.log(\"Joining room: \".concat(roomId));\n        this.currentRoom = roomId;\n        this.currentContext = {\n            type: \"room\",\n            id: roomId\n        };\n        this.persistedRooms.add(roomId);\n        return this.sendMessageWithRetry(\"join_room\", {\n            roomId\n        });\n    }\n    async leaveRoom(roomId) {\n        console.log(\"Leaving room: \".concat(roomId));\n        const result = await this.sendMessageWithRetry(\"leave_room\", {\n            roomId\n        });\n        if (result.success) {\n            this.persistedRooms.delete(roomId);\n            if (this.currentRoom === roomId) {\n                this.currentRoom = null;\n                this.currentContext = null;\n            }\n        }\n        return result;\n    }\n    async searchRooms(query) {\n        return this.sendMessageWithRetry(\"search_rooms\", {\n            query\n        });\n    }\n    async createRoom(name, description) {\n        var _result_data;\n        const result = await this.sendMessageWithRetry(\"create_room\", {\n            name,\n            description\n        });\n        if (result.success && ((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.id)) {\n            this.persistedRooms.add(result.data.id);\n        }\n        return result;\n    }\n    async getRooms() {\n        return this.sendMessageWithRetry(\"get_rooms\", {});\n    }\n    async getJoinedRooms() {\n        return this.sendMessageWithRetry(\"get_joined_rooms\", {});\n    }\n    async getRoomMembers(roomId) {\n        return this.sendMessageWithRetry(\"get_room_members\", {\n            roomId\n        });\n    }\n    async sendChatMessage(content, type, roomId, recipientId) {\n        console.log(\"=== WEBSOCKET CLIENT: Sending chat message ===\");\n        console.log(\"Type:\", type);\n        console.log(\"Room ID:\", roomId);\n        console.log(\"Recipient ID:\", recipientId);\n        console.log(\"Content:\", content);\n        // Add this validation to ensure we're sending to the correct room\n        if (type === \"room\" && !roomId) {\n            console.error(\"Attempted to send room message without roomId\");\n            return {\n                success: false,\n                error: \"Missing roomId for room message\"\n            };\n        }\n        if (type === \"dm\" && !recipientId) {\n            console.error(\"Attempted to send DM without recipientId\");\n            return {\n                success: false,\n                error: \"Missing recipientId for DM\"\n            };\n        }\n        const messageData = {\n            username: this.username,\n            content,\n            type,\n            roomId,\n            recipientId\n        };\n        console.log(\"Sending message data:\", messageData);\n        return this.sendMessageWithRetry(\"send_message\", messageData);\n    }\n    async getMessages(type, roomId, recipientId) {\n        console.log(\"Getting messages for \".concat(type, \":\"), {\n            roomId,\n            recipientId\n        });\n        this.currentContext = {\n            type,\n            id: roomId || recipientId || \"\"\n        };\n        return this.sendMessageWithRetry(\"get_messages\", {\n            type,\n            roomId,\n            recipientId\n        });\n    }\n    async editMessage(messageId, content, roomId, recipientId) {\n        return this.sendMessageWithRetry(\"edit_message\", {\n            messageId,\n            content,\n            roomId,\n            recipientId\n        });\n    }\n    async deleteMessage(messageId, roomId, recipientId) {\n        return this.sendMessageWithRetry(\"delete_message\", {\n            messageId,\n            roomId,\n            recipientId\n        });\n    }\n    async getOnlineUsers() {\n        return this.sendMessage(\"get_online_users\", {}) // Don't retry this as it's called frequently\n        ;\n    }\n    getPersistedRooms() {\n        return Array.from(this.persistedRooms);\n    }\n    startPolling() {\n        // Poll for updates every 3 seconds (increased from 2s to reduce load)\n        this.pollInterval = setInterval(async ()=>{\n            if (!this.isConnected) {\n                console.log(\"Skipping poll - not connected\");\n                return;\n            }\n            try {\n                // Get latest messages for current context\n                if (this.currentContext) {\n                    if (this.currentContext.type === \"room\") {\n                        var _result_error;\n                        const result = await this.sendMessage(\"get_messages\", {\n                            type: \"room\",\n                            roomId: this.currentContext.id\n                        });\n                        if (result.success && result.type === \"room_messages\") {\n                            this.onMessage({\n                                type: \"room_messages_update\",\n                                data: result.data\n                            });\n                        } else if (!result.success && ((_result_error = result.error) === null || _result_error === void 0 ? void 0 : _result_error.includes(\"Network\"))) {\n                            console.log(\"Network error during polling, will retry on next interval\");\n                        }\n                    } else if (this.currentContext.type === \"dm\") {\n                        const result = await this.sendMessage(\"get_messages\", {\n                            type: \"dm\",\n                            recipientId: this.currentContext.id\n                        });\n                        if (result.success && result.type === \"dm_messages\") {\n                            this.onMessage({\n                                type: \"dm_messages_update\",\n                                data: result.data\n                            });\n                        }\n                    }\n                }\n                // Get online users periodically (less frequently)\n                if (Math.random() < 0.3) {\n                    // Only 30% of the time to reduce load\n                    await this.getOnlineUsers();\n                }\n            } catch (error) {\n                console.error(\"Polling error:\", error);\n            // Don't mark as disconnected for polling errors\n            }\n        }, 3000);\n    }\n    async reconnect() {\n        console.log(\"Attempting to reconnect...\");\n        this.disconnect();\n        await new Promise((resolve)=>setTimeout(resolve, 1000)) // Wait 1 second\n        ;\n        await this.connect();\n    }\n    disconnect() {\n        console.log(\"Disconnecting WebSocket client...\");\n        this.isConnected = false;\n        if (this.pollInterval) {\n            clearInterval(this.pollInterval);\n            this.pollInterval = null;\n        }\n        this.currentRoom = null;\n        this.currentContext = null;\n        this.onMessage({\n            type: \"disconnected\"\n        });\n    }\n    constructor(userId, username, onMessage){\n        this.pollInterval = null;\n        this.currentRoom = null;\n        this.currentContext = null;\n        this.persistedRooms = new Set();\n        this.isConnected = false;\n        this.retryCount = 0;\n        this.maxRetries = 3;\n        this.userId = userId;\n        this.username = username;\n        this.onMessage = onMessage;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/websocket-client.ts\n"));

/***/ })

});